import java.io.*;
import java.util.*;

public class CodeAgonqF {

  static int a[], b[];
  static int N = 1000100;
  static final int mod = (int) 1e9 + 7;

  public static void main(String[] args) {
    InputReader in = new InputReader(System.in);
    PrintWriter w = new PrintWriter(System.out);

    a = new int[N];
    b = new int[N];

    a[0] = 1;
    b[0] = 0;

    a[1] = (int) pow(2, mod - 2, mod);
    b[1] = (int) pow(2, mod - 2, mod);

    for (int i = 2; i < N; i++) {
      a[i] = (a[i - 1] + a[i - 2]);
      if (a[i] >= mod)
        a[i] -= mod;

      long inv = pow(i + 1, mod - 2, mod);

      a[i] = (int) ((a[i] * inv) % mod);

      b[i] = (b[i - 1] + b[i - 2]);
      if (b[i] >= mod)
        b[i] -= mod;

      b[i] = (int) ((b[i] * inv) % mod);
    }

    int q = in.nextInt();

    while (q-- > 0) {
      int t = in.nextInt();
      if (t == 1) {
        w.println(find(in.nextInt(), in.nextInt(), in.nextLong() % mod));
      } else {
        int n = in.nextInt();
        int m = in.nextInt();
        long d = in.nextLong() % mod;
        long ans = 1;
        for (int i = 0; i <= m; i++)
          ans = (ans * find(n, n, d + i)) % mod;
        w.println(ans);
      }
    }

    w.close();
  }

  static long find(int l, int r, long d) {
    long all = pow(find(r, d), mod - 2, mod);
    long few = find(l - 1, d);
    return (all * few) % mod;
  }

  static int find(int n, long d) {
    if (n < 0)
      return 1;
    return (int) ((a[n] * 1L * d + b[n]) % mod);
  }

  static long pow(long a, int b, int mod) {
    if (b == 0)
      return 1;
    long t = pow(a, b >> 1, mod);
    t = (t * t) % mod;
    if ((b & 1) != 0)
      t = (t * a) % mod;
    return t;
  }

  static class InputReader {

    private final InputStream stream;
    private final byte[] buf = new byte[8192];
    private int curChar, snumChars;

    public InputReader(InputStream st) {
      this.stream = st;
    }

    public int read() {
      if (snumChars == -1)
        throw new InputMismatchException();
      if (curChar >= snumChars) {
        curChar = 0;
        try {
          snumChars = stream.read(buf);
        } catch (IOException e) {
          throw new InputMismatchException();
        }
        if (snumChars <= 0)
          return -1;
      }
      return buf[curChar++];
    }

    public int nextInt() {
      int c = read();
      while (isSpaceChar(c)) {
        c = read();
      }
      int sgn = 1;
      if (c == '-') {
        sgn = -1;
        c = read();
      }
      int res = 0;
      do {
        res *= 10;
        res += c - '0';
        c = read();
      } while (!isSpaceChar(c));
      return res * sgn;
    }

    public long nextLong() {
      int c = read();
      while (isSpaceChar(c)) {
        c = read();
      }
      int sgn = 1;
      if (c == '-') {
        sgn = -1;
        c = read();
      }
      long res = 0;
      do {
        res *= 10;
        res += c - '0';
        c = read();
      } while (!isSpaceChar(c));
      return res * sgn;
    }

    public int[] nextIntArray(int n) {
      int a[] = new int[n];
      for (int i = 0; i < n; i++) {
        a[i] = nextInt();
      }
      return a;
    }

    public String readString() {
      int c = read();
      while (isSpaceChar(c)) {
        c = read();
      }
      StringBuilder res = new StringBuilder();
      do {
        res.appendCodePoint(c);
        c = read();
      } while (!isSpaceChar(c));
      return res.toString();
    }

    public String nextLine() {
      int c = read();
      while (isSpaceChar(c))
        c = read();
      StringBuilder res = new StringBuilder();
      do {
        res.appendCodePoint(c);
        c = read();
      } while (!isEndOfLine(c));
      return res.toString();
    }

    public boolean isSpaceChar(int c) {
      return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
    }

    private boolean isEndOfLine(int c) {
      return c == '\n' || c == '\r' || c == -1;
    }

  }

}
